[
["fie-workshop.html", "2018 FIE Workshop Pre-workshop setup Description Agenda Tutorial: Getting started with R Tutorial: Using midfieldr", " 2018 FIE Workshop Workshop conducted at the 2018 Frontiers in Education Conference (2018-10-03) in San Jose, CA. The goal of the workshop is to share our data, methods, and metrics for intersectional research in student persistence. The workshop is designed for R beginners. Pre-workshop setup Getting started for pre-workshop software installation instructions. Preface for an introduction to MIDFIELD and the workshop facilitators. Description The goal of the workshop is to make MIDFIELD more accessible to the FIE community via midfieldr. On completing the workshop, participants should be able to Describe key variables in the MIDFIELD data Select academic programs and populations to study Use R to compute and graph persistence metrics (e.g., graduation rate) Explain key features of effective data displays Continue using midfieldr to study additional persistence metrics Participants should be sufficiently familiar with their operating systems to install software and navigate directories, but prior experience with R is not required. Agenda Workshop activities include think-pair share, active learning, demonstration, discussion, and self-paced software tutorials. Our 3-hour agenda includes: Min Topic 10 Introductions 30 Elements of effective graphs 20 Getting started with R (tutorial) 10 Accessing the MIDFIELD data 20 — break — 50 Using midfieldr (tutorial) 20 Extending your repertoire 20 Next steps Tutorial: Getting started with R This is a self-paced tutorial. Don’t worry about the pace of your work. Everyone works and learns new material at a different pace. Please ask questions of your neighbors as well as the facilitators If you finish early, ask if anyone near you needs assistance Save your work regularly 1. Create an R project Open RStudio. File &gt; New Project &gt; New Directory &gt; New Project Fill in the Directory Name text box with 2018-FIE-midfieldr-workshop Select a location on your computer to save the project Check the Open in a new session box Click Create Project The new project directory will be all of these things: a directory or “folder” on your computer an RStudio Project On your computer, if you navigate to the new project folder, you should have at least the following folders and files, 2018-FIE-midfieldr-workshop/ `-- 2018-FIE-midfieldr-workshop.Rproj Always begin an R work session by opening the project’s Rproj file. Let’s practice: First, close all RStudio windows Navigate to the workshop folder you jst created Open 2018-FIE-midfieldr-workshop.Rproj We work within an R project because it automatically sets project directory as the R working directory. Set project options Tools &gt; Global Options. Figure from R for Data Science Optional reading: To read all about R Projects, see the RStudio support page. 2. Create an R script If you closed the project, then open 2018-FIE-midfieldr-workshop.Rproj File &gt; New File &gt; R Script An Untitled script will open File &gt; Save As Type in a file name, for example, get-started.R Save In this workshop, all files we create will be saved in the main project folder, with no subdirectories. If you prefer to use subdirectories (folders) inside the project, that’s OK. In the R file, type library(tidyverse) To run the script, Save Click the Run button to run a selected line or lines of code Click Source to run the entire script If you get an error statement that the package does not exist, you probably have to install the package. In the RStudio, console, just type install.packages(&quot;tidyverse&quot;) When the script runs correctly, you should see set of messages like this, -- Attaching packages --------------------------------------- tidyverse 1.2.1 -- v ggplot2 3.0.0.9000 v purrr 0.2.5 v tibble 1.4.2 v dplyr 0.7.6 v tidyr 0.8.1 v stringr 1.3.1 v readr 1.1.1 v forcats 0.3.0 -- Conflicts ------------------------------------------ tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() 3. Look at a tibble The tidyverse comes with several data sets. We will use the one called mpg. To get a glimpse of the data, just type its name in the script and run it. In this tutorial, R output is indicated by a double hashtag (##). mpg ## # A tibble: 234 x 11 ## manufacturer model displ year cyl trans drv cty hwy fl cla~ ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;ch&gt; ## 1 audi a4 1.8 1999 4 auto~ f 18 29 p com~ ## 2 audi a4 1.8 1999 4 manu~ f 21 29 p com~ ## 3 audi a4 2 2008 4 manu~ f 20 31 p com~ ## 4 audi a4 2 2008 4 auto~ f 21 30 p com~ ## 5 audi a4 2.8 1999 6 auto~ f 16 26 p com~ ## 6 audi a4 2.8 1999 6 manu~ f 18 26 p com~ ## 7 audi a4 3.1 2008 6 auto~ f 18 27 p com~ ## 8 audi a4 q~ 1.8 1999 4 manu~ 4 18 26 p com~ ## 9 audi a4 q~ 1.8 1999 4 auto~ 4 16 25 p com~ ## 10 audi a4 q~ 2 2008 4 manu~ 4 20 28 p com~ ## # ... with 224 more rows The result tells us that the data has 234 observations (rows) 11 variables (columns) manufacturer is a variable of type “character” displ is a variable of type “double” year is a variable of type “integer” Data frames are the most common way of storing data in R: a 2-dimensional data structure with columns of equal lengths. Columns can be of different types (numeric, character, logical, etc.) but all values in a column are the same type. Optional reading: Data frames. In a tidy data frame, every column is a variable and every row is an observation. The mpg data is in tidy form. The output above tells us that mpg is a tibble. Tibbles are data frames, but they tweak some older behaviors to make life a little easier. Optional reading: Tibbles. 4. Assignment operator In R we assign values to objects with the assignment operator, &lt;-. For example, suppose we want to assign the value \\(\\pi\\) to the object \\(x\\). # an angle in radians x &lt;- pi Type the object name x to see it’s value. x ## [1] 3.141593 5. Functions Functions are fundamental building blocks in R. Functions carry out specified tasks, typically operating on one or more arguments. For example, the cosine function, cos(), has one argument, cos(x) ## [1] -1 The help page for a function is found by typing (in the RStudio console pane) a question mark followed by the function name. For example, ?cos(). A function from the tidyverse that we will use regularly is glimpse(). It gives us a useful glimpse of a data frame, showing all the variables (column names) but written down the page, and data runs across the page. making it possible to see every column in a data frame. For example, glimpse(mpg) ## Observations: 234 ## Variables: 11 ## $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;... ## $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 qua... ## $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0,... ## $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1... ## $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6... ## $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)... ## $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... ## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 1... ## $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 2... ## $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... ## $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;comp... The general form of a function is function_name(arg1 = value, arg2 = value, ... ) 6. Graphs We use the ggplot() function from the tidyverse for creating graphs. For example, add the following lines to your script and run the code. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() ggplot() arguments: argument is data to which we assign the data frame mpg argument mapping to which we assign the aesthetics aes() function arguments of aes() are x and y to which we assign the value of the displ and hwy variables from the data frame + adds a new layer to the graph geom_point() assigns points as the data markers 7. Saving results to a file We can save any result to file, for example, to save the graph we just made as a PNG image, we write ggsave(&quot;mileage.png&quot;) To save a data frame as a CSV file, write_csv(mpg, &quot;mpg_data.csv&quot;) Add these lines to your script and run it. If you examine your project folder you will find the PNG and CSV files your just made. Your directory should look like this now, 2018-FIE-midfieldr-workshop/ |-- get-started.R |-- mpg_data.csv |-- mileage.png `-- 2018-FIE-midfieldr-workshop.Rproj 8. Small multiple graphs We can use a 3rd variable from the data frame, the variable class, as a conditioning variable to create a set of small multiples (called facets in ggplot). The new graph layer is created using the facet_wrap() function. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + facet_wrap(vars(class)) Or, instead of class, we could condition using the number of cylinders in the engine. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + facet_wrap(vars(cyl)) If we aren’t interested in 5-cylinder cars (?), we omit them from the data frame with the filter() function. Filter is a row-operation. The following code could be stated, “Start with mpg, assign it to the new object mpg_rev, then, filter to keep all rows in which the cyl variable is not equal to 5.” mpg_rev &lt;- mpg %&gt;% filter(cyl != 5) The characters != is “not equal to” the pipe operator %&gt;% can be read “then” ggplot(data = mpg_rev, mapping = aes(x = displ, y = hwy)) + geom_point() + facet_wrap(vars(cyl), nrow = 1) The nrow = 1 argument places the panels of the graphs all in one row. 8. Smooth curve Adding the geom_smooth() layer adds a loess curve (a local regression) to each panel. ggplot(data = mpg_rev, mapping = aes(x = displ, y = hwy)) + geom_point() + facet_wrap(vars(cyl), nrow = 1) + geom_smooth() If we want to try a linear regression , add the argument method - &quot;lm&quot; ggplot(data = mpg_rev, mapping = aes(x = displ, y = hwy)) + geom_point() + facet_wrap(vars(cyl), nrow = 1) + geom_smooth(method = &quot;lm&quot;) The shaded area around the regression is the confidence interval. We can remove it using the argument se = FALSE. ggplot(data = mpg_rev, mapping = aes(x = displ, y = hwy)) + geom_point() + facet_wrap(vars(cyl), nrow = 1) + geom_smooth(method = &quot;lm&quot;, se = FALSE) 9. Labels We can change the axis labels and add a title (above the figure) and a caption (below the figure) using the labs() layer. Type ?mpg to find out that the engine displacement is in liters. ggplot(data = mpg_rev, mapping = aes(x = displ, y = hwy)) + geom_point() + facet_wrap(vars(cyl), nrow = 1) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + labs(x = &quot;Engine displacement (liters)&quot;, y = &quot;Highway mileage (mpg)&quot;, title = &quot;Fuel economy of popular cars, 1199--2008&quot;, caption = &quot;EPA http://fueleconomy.gov&quot;) 10. Wrap-up This concludes our brief introduction to R. You learned to Create an R project Create an R script Save and run an R script Regarding R syntax you should be able to Describe a data frame Describe the attributes of a tidy data frame Use the assignment operator Describe basic components of an R function Draw a simple scatterplot Create small multiples Add a smooth loess curve to a graph Add a linear regression to a graph Save a graph as a PNG file Save a data frame as a CSV file Tutorial: Using midfieldr This is a self-paced tutorial illustrating functions in the midfieldr package. Don’t worry about the pace of your work. Everyone works and learns new material at a different pace. Please ask questions of your neighbors as well as the facilitators If you finish early, ask if anyone near you needs assistance Save your work regularly The tutorial located at https://midfieldr.github.io/midfieldr/index.html , part of the midfieldr website. Select the Getting started tab and scroll down to Select programs to study. Start a new R script Add a line of code Run it Examine the result Repeat "]
]
